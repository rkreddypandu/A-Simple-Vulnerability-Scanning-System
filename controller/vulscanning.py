import requests, re, random
import os
import re
import paramiko
from dao.informationdao import InsertvulDAO
from dao.informationdao import SelectinfoDAO
from controller.ipdomain import *
insertvul = InsertvulDAO()
selectvul = SelectinfoDAO()


BOOLEAN_TESTS = (' AND %d=%d', ' OR NOT (%d=%d)')
DBMS_ERRORS = {  # regular expressions used for DBMS recognition based on error message response
    "MySQL": (r"SQL syntax.*MySQL", r"Warning.*mysql_.*", r"valid MySQL result", r"MySqlClient\."),
    "PostgreSQL": (r"PostgreSQL.*ERROR", r"Warning.*\Wpg_.*", r"valid PostgreSQL result", r"Npgsql\."),
    "Microsoft SQL Server": (
    r"Driver.* SQL[\-\_\ ]*Server", r"OLE DB.* SQL Server", r"(\W|\A)SQL Server.*Driver", r"Warning.*mssql_.*",
    r"(\W|\A)SQL Server.*[0-9a-fA-F]{8}", r"(?s)Exception.*\WSystem\.Data\.SqlClient\.",
    r"(?s)Exception.*\WRoadhouse\.Cms\."),
    "Microsoft Access": (r"Microsoft Access Driver", r"JET Database Engine", r"Access Database Engine"),
    "Oracle": (
    r"\bORA-[0-9][0-9][0-9][0-9]", r"Oracle error", r"Oracle.*Driver", r"Warning.*\Woci_.*", r"Warning.*\Wora_.*"),
    "IBM DB2": (r"CLI Driver.*DB2", r"DB2 SQL error", r"\bdb2_\w+\("),
    "SQLite": (r"SQLite/JDBCDriver", r"SQLite.Exception", r"System.Data.SQLite.SQLiteException", r"Warning.*sqlite_.*",
               r"Warning.*SQLite3::", r"\[SQLITE_ERROR\]"),
    "Sybase": (r"(?i)Warning.*sybase.*", r"Sybase message", r"Sybase.*Server message.*"),
}


def sqlchecknum(url):
    if (not url.find("?")):
        return False
    _url = url + "%29%28%22%27"  # 先用)("'使报错
    _content = requests.get(_url).text
    print(_content)
    for (dbms, regex) in ((dbms, regex) for dbms in DBMS_ERRORS for regex in DBMS_ERRORS[dbms]):
        if (re.search(regex, _content)):
            print(dbms)
            print(regex)
            return True
    content = {}
    content["origin"] = requests.get(url).text
    print(url)
    print(content["origin"])
    for test_payload in BOOLEAN_TESTS:
        # 正确的网页
        RANDINT = random.randint(1, 255)
        _url = url + test_payload % (RANDINT, RANDINT)
        print(_url)
        content["true"] = requests.get(_url).text
        print(content["true"])
        _url = url + test_payload % (RANDINT, RANDINT + 1)
        print(_url)
        content["false"] = requests.get(_url).text
        print(content["false"])
        if content["origin"] == content["true"] != content["false"]:
            ip = iptodomain(url)
            res = selectvul.getvulexistinfo(ip)
            for i in res:
                if i[0] == url:
                    print('数据库已经存在该漏洞')
                    return "sql fonud: %s" % url
            else:
                insertvul.insertsqlvul(ip,url,'数字型注入')
                insertvul.insertvultotal('highrisk','highrisk',ip)
                return "sql fonud: %s" % url


def xsscheck(url):
    domain = url.split("?")[0]
    _url = url.split("?")[-1]
    pararm = {}
    for val in _url.split("&"):
        pararm[val.split("=")[0]] = val.split("=")[-1]
    #combine
    urls = []
    diclist = os.path.join(os.getcwd(), 'controller/dic/xsspayload.txt')
    with open(diclist) as file_object:
        lines = file_object.readlines()
    for val in pararm.values():
        for line in lines:
            pi_string = line.rstrip()
            new_url = domain + '?' + _url.replace(val,pi_string)
            res = requests.get(new_url).text
            print(res)
            print(pi_string)
            result = pi_string in res
            if result == True:
                ip = iptodomain(url)
                res = selectvul.getvulexistinfo(ip)
                for i in res:
                    if i[0] == url:
                        print('数据库已经存在该漏洞')
                        return result
                else:
                    insertvul.insertxssvul(ip, url, 'get型xss')
                    insertvul.insertvultotal('moderaterisk','moderaterisk',ip)
                    return result


def priesccheck(ip):
    #脏牛提权受影响的部分版本（阿里总结结果）
    released = [['CentOS','5.8','X64'],
                ['CentOS', '5.1', 'X64'],
                ['CentOS', '6.5',  'X64'],
                [ 'CentOS', '7.0',  'X64'],
                [ 'CentOS',  '7.2',  'X64'],
                [ 'Ubuntu',  '12.04',  'X64'],
                [ 'Ubuntu', '14.04', 'X64'],
                [ 'Debain',  '6.0.9',  'X64'],
                [ 'Debain',  '7.5.0',  'X64'],
                [ 'Debain',  '8.0.4', 'X64'],
                [ 'Aliyun Linux',  '15.1',  'X64'],
                [ 'SUSE Linux Enterprise Server',  '11 SP1',  'X64'],
                [ 'SUSE Linux Enterprise Server',  '11 SP2',  'X64'],
                [ 'SUSE Linux Enterprise Server',  '11 SP3',  'X64'],
                ['SUSE Linux Enterprise Server', '12 SP1',  'X64'],
                ['Open SUSE',  '13.1',  'X64'],
                [ 'CoreOS', '681.2.0',  'X64'],
                [ 'FreeBSD',  '10.1',  'X64'],
                ]
    # 创建ssh对象
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh.connect(hostname=ip, port=22, username='lele', password='zl123123')
        stdin, stdout, stderr = ssh.exec_command('cat /etc/redhat-release')
        result = stdout.read()
        res = result.decode().split(' ')
        print(res)
        for i in released:
            if res[0] == i[0] and re.match(i[1],res[3]):
                pri = 'priesc'
                insertvul.insertpriescvul(ip, '脏牛提权')
                return pri
        else:
            pri = 'nopriesc'
            return pri
        ssh.close()
    except Exception:
        print('不存在该主机')







# if __name__ == '__main__':
#     result = xsscheck('http://192.168.48.128/xsstest.php?name=123')
#     # print(result)