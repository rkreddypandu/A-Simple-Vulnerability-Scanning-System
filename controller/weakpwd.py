import pymysql # 导入数据的api包
import os
from dao.informationdao import InsertpassweakDAO
from dao.informationdao import InsertvulDAO
import paramiko





insertpassweakDAO = InsertpassweakDAO()
insertvulDao = InsertvulDAO()

# 数据库访问封装的基类
class mysqlDAO():
    # 1. 这些参数做私有化，就体现了封装安全性的好处
    def __init__(self, host='192.168.48.128', name='root', pwd='*******', port='3306', schema='testsqlinject', charset='utf8'):
        self.__host = host
        self.__name = name
        self.__pwd = pwd
        self.__port = port
        self.__schema = schema
        self.__charset = charset
        self.__conn = None
        self.__cursor = None
        pass

    # 2. 编写建立数据库连接的公有方法（通用的）
    def getConnection(self,host,pwd):
        try:
            self.__conn = pymysql.connect(host, self.__name, pwd, self.__schema, charset=self.__charset)
        except (pymysql.MySQLError, pymysql.DatabaseError, Exception):
            logger.error("数据库连接异常：" + self.__host)
            pass
        self.__cursor = self.__conn.cursor()
        pass

    def close(self):
        if self.__cursor and self.__conn:
            self.__cursor.close()
            self.__conn.close()

        # 5. 为了支持事务管理，把对数据库事务提交的动作提取出来，封装成独立的方法

    def commit(self):
        # print("----------")
        self.__conn.commit()


class mysqlPwd(mysqlDAO):
    # 根据用户名和密码进行查询
    def getpwd(self,hostlist):
        diclist = os.path.join(os.getcwd(), 'controller/dic/' + 'pwd.txt')
        with open(diclist) as file_object:
            lines = file_object.readlines()
        for dic in lines:
            try:
                print(dic)
                super().getConnection(hostlist,dic)
                print('密码为'+dic)
                insertpassweakDAO.insertmysqlweak(1,hostlist,'mysql','root',dic)
                insertvulDao.insertvultotal('highrisk','highrisk',hostlist)
                super().commit()
                return 'mysqlpassweak'
            except Exception as e:
                print('密码破解失败')
                # logger.error("执行SQL：" + sqlSelect + " 出现异常，params:" + params + " " + str(e) )
            finally:
                super().close()



def sshweakpass(host):
    # 创建ssh对象
    ssh = paramiko.SSHClient()
    # 连接服务器
    # 允许连接不在know_hosts文件中的主机
    diclist = os.path.join(os.getcwd(), 'controller/dic/' + 'pwd.txt')
    with open(diclist) as file_object:
        pwdlines = file_object.readlines()
    userlist = os.path.join(os.getcwd(), 'controller/dic/' + 'user.txt')
    with open(userlist) as file_object:
        userlines = file_object.readlines()
    for userdic in userlines:
        userdic = userdic.rstrip()
        for pwddic in pwdlines:
            pwddic = pwddic.rstrip()
            try:
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh.connect(hostname='192.***.**.***', port=22, username=userdic, password=pwddic)
                print('密码破解成功')
                print('密码为'+pwddic)
                insertpassweakDAO.insertsshweak(2, host, 'ssh', userdic,pwddic)
                insertvulDao.insertvultotal('highrisk', 'highrisk',host)
                # stdin, stdout, stderr = ssh.exec_command('df')
                # result = stdout.read()
                # print(result.decode())
                ssh.close()
                return 'sshpassweak'
            except Exception:
                print(userdic)
                print(pwddic)
                print('密码破解失败')


