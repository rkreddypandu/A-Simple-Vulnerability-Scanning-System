import csv
import random
import math
import operator
import os

def loadDataset(split, trainingSet):
    diclist = os.path.join(os.getcwd(), 'controller/knntraindata/' + 'riskdata.txt')
    with open(diclist, 'rt',encoding="utf-8") as csvfile:
        lines = csv.reader(csvfile)
        dataset = list(lines)
        for x in range(len(dataset)-1):
            for y in range(4):
                dataset[x][y] = float(dataset[x][y])
            if random.random() < split:
                trainingSet.append(dataset[x])
            else:
                pass


def euclideanDistance(instance1, instance2, length):
    distance = 0
    for x in range(length):
        distance += pow((instance1[x]-instance2[x]), 2)
    return math.sqrt(distance)


def getNeighbors(trainingSet, testInstance, k):
    distances = []
    length = len(testInstance)-1
    for x in range(len(trainingSet)):
        #testinstance
        dist = euclideanDistance(testInstance, trainingSet[x], length)
        distances.append((trainingSet[x], dist))
        #distances.append(dist)
    distances.sort(key=operator.itemgetter(1))
    neighbors = []
    for x in range(k):
        neighbors.append(distances[x][0])
        return neighbors


def getResponse(neighbors):
    classVotes = {}
    for x in range(len(neighbors)):
        response = neighbors[x][-1]
        if response in classVotes:
            classVotes[response] += 1
        else:
            classVotes[response] = 1
    sortedVotes = sorted(classVotes.items(), key=operator.itemgetter(1), reverse=True)
    return sortedVotes[0][0]


def getAccuracy(testSet, predictions):
    correct = 0
    for x in range(len(testSet)):
        if testSet[x][-1] == predictions[x]:
            correct += 1
    return (correct/float(len(testSet)))*100.0


def knnriskcheck(risklist):
    #prepare data
    trainingSet = []
    # testSet = [[6,0,2,0,'moderaterisk'], [5,4,0,0,'Basicsafety'], [6,8,4,2,'serious'], [4,2,6,6,'critical'], [5,3,1,0,'moderaterisk'], [6,0,0,0,'Basicsafety'], [0,5,5,1,'serious'], [3,8,1,5,'critical'], [4,3,0,0,'moderaterisk'], [9,2,0,0,'Basicsafety'], [15,7,4,0,'serious'], [9,2,0,7,'critical'], [8,3,3,0,'moderaterisk'], [4,1,0,0,'Basicsafety'], [4,6,4,2,'serious'], [15,9,11,5,'critical'], [6,2,2,0,'moderaterisk'], [9,3,0,0,'Basicsafety'], [4,3,4,2,'serious'], [16,11,8,6,'critical'], [3,2,3,0,'moderaterisk'], [3,5,0,0,'Basicsafety'], [9,5,5,2,'serious'], [15,13,10,7,'critical'], [6,0,3,0,'moderaterisk'], [9,2,0,0,'Basicsafety'], [10,1,4,2,'serious'], [14,14,11,6,'critical'], [10,5,2,0,'moderaterisk'], [9,5,0,0,'Basicsafety'], [11,4,3,1,'serious'], [14,1,5,4,'critical'], [8,5,3,0,'moderaterisk'], [0,5,0,0,'Basicsafety'], [10,6,4,1,'serious'], [20,3,5,8,'critical'], [8,3,3,0,'moderaterisk'], [9,2,0,0,'Basicsafety'], [14,4,5,1,'serious'], [19,18,10,5,'critical']]
    testSet = [[risklist[-4],risklist[-3],risklist[-2],risklist[-1],0]]
    print(testSet)
    split = 1
    loadDataset(split, trainingSet)
    print ('Train set: ' + repr(len(trainingSet)))
    print ('Test set: ' + repr(len(testSet)))
    #generate predictions
    predictions = []
    k = 6
    for x in range(len(testSet)):
        # trainingsettrainingSet[x]
        neighbors = getNeighbors(trainingSet, testSet[x], k)
        result = getResponse(neighbors)
        predictions.append(result)
        print(predictions)
        print ('>predicted=' + repr(result) + ', actual=' + repr(testSet[x][-1]))
    accuracy = getAccuracy(testSet, predictions)
    print('Accuracy: ' + repr(accuracy) + '%')
    return predictions


