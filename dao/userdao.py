from .basedao import BaseDAO
from logger.syslogger import logger



class UserDAO(BaseDAO):
    # 根据用户名和密码进行查询
    def getUserByUserNameAndPwd(self, user):
        try:
            super().getConnection()
            sqlSelect = "select roleid,username, userpwd from t_user where username=%s and userpwd=%s"
            params = (user.userName, user.userPwd)
            result = super().fetchone(sqlSelect, params)
            print(result)
            super().commit()
            return result
        except Exception as e:
            logger.error("执行SQL：" + sqlSelect + " 出现异常，params:" + params + " " + str(e) )
        finally:
            super().close()

    # 查询所有的用户信息
    def getAllUsers(self):
        try:
            super().getConnection()
            sqlSelect = "select * from t_user "
            result = super().fetchall(sqlSelect)
            super().commit()
            return result
        except Exception as e:
            logger.error("执行SQL：" + sqlSelect + " 出现异常，params:" + str(e) )
        finally:
            super().close()

    # 删除用户
    def deleteUserById(self, userId):
        try:
            super().getConnection()
            sqlDelete= "delete from t_user where userId=%s"
            params = (userId,)
            result = super().execute(sqlDelete, params)
            super().commit()
            return result
        except Exception as e:
            super().rollback()
            logger.error("执行SQL：" + sqlDelete + " 出现异常，params:" + params + str(e))
        finally:
            super().close()

   # 新增用户
    def createUser(self, user):
        try:
            super().getConnection()
            print('123')
            sqladd = "insert into t_user (roleid,username, userpwd) values (%s,%s, %s)"
            params = (int('2'),user.userName, user.userPwd)
            result = super().execute(sqladd, params)
            super().commit()
            return result
        except Exception as e:
            super().rollback()
            logger.error("执行SQL：" + sqlUpdate + " 出现异常，params:" + params + str(e))
        finally:
            super().close()

    # 修改用户信息
    def editUserById(self,user,sess):
        try:
            super().getConnection()
            if user.userName != None and user.userName != '':
                sqlUpdate = "update t_user set username=%s,userpwd=%s where username=%s"
                params = (user.userName, user.userPwd,sess)
                print(user.userPwd,user.userName,sess)
                result = super().execute(sqlUpdate, params)
                super().commit()
                return result
            else:
                sqlUpdate = "update t_user set userpwd=%s where username=%s"
                params = (user.userPwd, sess)
                result = super().execute(sqlUpdate, params)
                super().commit()
                return result
        except Exception as e:
            super().rollback()
            logger.error("执行SQL：" + sqlUpdate + " 出现异常，params:" + params + str(e))
        finally:
            super().close()

    # 按条件查询用户信息
    def getUserinfo(self,name):
        try:
            super().getConnection()
            sqlSelect = "select userpwd from t_user where username = %s"
            params = (name)
            result = super().fetchall(sqlSelect,params)
            super().commit()
            return result
        except Exception as e:
            logger.error("执行SQL：" + sqlSelect + " 出现异常，params:" + str(e))
        finally:
            super().close()