from flask import Flask, render_template, request, session, redirect, url_for
from dao.userdao import UserDAO
from dao.informationdao import SelectinfoDAO

import os
from datetime import timedelta
from controller.register_judge import Register_judge
from controller.login_judge import Login_judge
from controller.edituserpass import editpassuser
from controller.collectinfo import *
from controller.ipdomain import *
from controller.vulscanning import sqlchecknum
from controller.vulscanning import xsscheck
from controller.vulscanning import priesccheck
from controller.weakpwd import mysqlPwd
from controller.weakpwd import sshweakpass
from controller.classifyknn import knnriskcheck

app = Flask(__name__)
app.config['SECRET_KEY'] = os.urandom(24)   #设置为24位的字符,每次运行服务器都是不同的，所以服务器启动一次上次的session就清除。
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(minutes=30)  #设置session的保存时间。


userDAO = UserDAO()
selectinfoDao = SelectinfoDAO()
getmysqlpwd = mysqlPwd()

@app.route('/')   #  flask的路由，就是用来关联url和处理函数
def index():      #  就是做了跳转
    # ---------------
    # 调用后端代码
    #----------------
    if session.get("userName"):
        users = userDAO.getAllUsers()
        return render_template('main1.html', users=users)
    else:
        return render_template('login.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    res = Login_judge()
    if res:
        name = session.get("userName")

        users = userDAO.getAllUsers()
        return render_template('main1.html', users=users, name=name)
    else:
        message = "用户名或密码不正确"
        return render_template('login.html', message=message, code=500)  # 第一参数是其他的URL，message是带过去的数据

@app.route('/logout', methods=['GET', 'POST'])
def logout():
    session.clear()
    return render_template('login.html')




@app.route('/register', methods=['GET', 'POST'])
def register():
    res = Register_judge()
    print(res)
    if res:
        return render_template('login.html', message="注册成功，请登录", code=500)  # 第一参数是其他的URL，message是带过去的数据
    else:
        return render_template('login.html', message="注册失败", code=500)  # 第一参数是其他的URL，message是带过去的数据

# url传参是采用的get方法， 参数传递的格式是在URL后带？，多个参数用&连接
@app.route('/delete', methods=['GET', 'POST'])
def deleteUser():
    userId = request.args.get('userId')
    print(userId)
    if userId != "":
        userDAO.deleteUserById(userId)
        pass
    users = userDAO.getAllUsers()
    return render_template('tables/useredit.html', users=users)

@app.route('/useredit', methods=['GET', 'POST'])
def useredit():
    if session.get("roleid") == 1:
        users = userDAO.getAllUsers()
        return render_template('tables/useredit.html', users=users)
    else:
        return render_template('tables/authorization.html')



@app.route('/passedit', methods=['GET', 'POST'])
def passedit():
    return render_template('tables/editpass.html')

@app.route('/editpass', methods=['GET', 'POST'])
def editpass():
    if session.get("userName"):
        print(session.get("userName"))
        editpassuser(session.get("userName"))

    return render_template('tables/editpass.html')





@app.route('/dataport', methods=['GET', 'POST'])
def dataport():
    ips = selectinfoDao.getip('t_port',0)
    return render_template('tables/dataport.html',ips=ips)

@app.route('/portselect', methods=['GET', 'POST'])
def portselect():
    portlist = request.args.get('portlist')
    if portlist != "":
        nmap_A_scan(portlist)
    ips = selectinfoDao.getip('t_port',0)
    return render_template('tables/dataport.html',ips=ips)

@app.route('/portlist', methods=['GET', 'POST'])
def portinfo():
    portlist = request.args.get('portlists')
    ports = selectinfoDao.getport(portlist)
    ips = selectinfoDao.getip('t_port',0)
    return render_template('tables/dataport.html', ports=ports,ips=ips)



@app.route('/datahost', methods=['GET', 'POST'])
def datahost():
    ips = selectinfoDao.getip('t_host',0)
    return render_template('tables/datahost.html',ips=ips)

@app.route('/hostselect', methods=['GET', 'POST'])
def hostselect():
    hostlist = request.args.get('hostlist')
    print(hostlist)
    if hostlist != "":
        nmap_B_scan(hostlist)
    ips = selectinfoDao.getip('t_host',0)
    return render_template('tables/datahost.html',ips=ips)

@app.route('/hostlist', methods=['GET', 'POST'])
def hostinfo():
    hostlist = request.args.get('hostlist')
    print(hostlist)
    hosts = selectinfoDao.gethost(hostlist)
    ips = selectinfoDao.getip('t_host',0)
    print(hosts)
    return render_template('tables/datahost.html', hosts=hosts,ips=ips)



@app.route('/datapath', methods=['GET', 'POST'])
def datapath():
    ips = selectinfoDao.getip('t_path',0)
    return render_template('tables/datapath.html', ips=ips)

@app.route('/pathselect', methods=['GET', 'POST'])
def pathselect():
    postpathlist = request.form.getlist('check')
    domain_name = request.form['pathslist']
    print(domain_name)
    if postpathlist and domain_name:
        resip = iptodomain(domain_name)
        for dic in postpathlist:
            thread = Mythread(resip,dic,domain_name)
            thread.start()
    ips = selectinfoDao.getip('t_path',0)
    return render_template('tables/datapath.html', ips=ips)

@app.route('/pathlist', methods=['GET', 'POST'])
def pathlist():
    getpathlist = request.args.get('pathlists')
    print(getpathlist)
    ips = selectinfoDao.getip('t_path',0)
    paths = selectinfoDao.getpath(getpathlist)
    return render_template('tables/datapath.html',paths=paths,ips=ips)


@app.route('/sqlvul', methods=['GET', 'POST'])
def vulsql():
    ips = selectinfoDao.getip('t_vul',1)
    return render_template('tables/sqlvul.html',ips=ips)

@app.route('/sqlselect', methods=['GET', 'POST'])
def sqlselect():
    sqlurl = request.form['vulsqlnum']
    res = sqlchecknum(sqlurl)
    if res == None:
        res = 'nosql'
    else:
        res = 'sql'
    ips = selectinfoDao.getip('t_vul',1)
    return render_template('tables/sqlvul.html',res = res,ips=ips)

@app.route('/sqllist', methods=['GET', 'POST'])
def sqllist():
    getsqllist = request.args.get('sqllist')
    print(getsqllist)
    ips = selectinfoDao.getip('t_vul',1)
    sqls = selectinfoDao.getsqlvul(getsqllist)
    return render_template('tables/sqlvul.html',sqls=sqls,ips=ips)


@app.route('/xssselect', methods=['GET', 'POST'])
def xssselect():
    xssurl = request.form['vulxss']
    res = xsscheck(xssurl)
    print(res)
    if res == True:
        res = 'xss'
    else:
        res = 'noxss'
    ips = selectinfoDao.getip('t_vul',2)
    return render_template('tables/xsscheck.html',res = res,ips=ips)

@app.route('/xsscheck', methods=['GET', 'POST'])
def xsstest():
    ips = selectinfoDao.getip('t_vul',2)
    return render_template('tables/xsscheck.html',ips=ips)

@app.route('/xsslist', methods=['GET', 'POST'])
def xsslist():
    getxsslist = request.args.get('xsslist')
    print(getxsslist)
    ips = selectinfoDao.getip('t_vul',2)
    xss = selectinfoDao.getxssvul(getxsslist)
    print(xss)
    return render_template('tables/xsscheck.html',xss=xss,ips=ips)


@app.route('/priescselect', methods=['GET', 'POST'])
def priescselect():
    priescurl = request.form['vulpriescnum']
    res = priesccheck(priescurl)
    ips = selectinfoDao.getip('t_vul',3)
    return render_template('tables/priesc.html',res = res,ips=ips)

@app.route('/priesc', methods=['GET', 'POST'])
def priesctest():
    ips = selectinfoDao.getip('t_vul',3)
    return render_template('tables/priesc.html',ips=ips)



@app.route('/mysqlpassinfo', methods=['GET', 'POST'])
def mysqlweakinfo():
    hostlist = request.args.get('hostlists')
    res = getmysqlpwd.getpwd(hostlist)
    if res == None:
        res = 'nomysqlpass'
    else:
        res = 'mysqlpass'
    ports = selectinfoDao.getmysqlport()
    weakpwd =selectinfoDao.getmysqlpass(1)
    return render_template('/tables/mysqlpassweak.html',ports=ports,weakpwd=weakpwd,res=res)

@app.route('/mysqlpassweak', methods=['GET', 'POST'])
def mysqlweak():
    ports = selectinfoDao.getmysqlport()
    weakpwd = selectinfoDao.getmysqlpass(1)
    return render_template('/tables/mysqlpassweak.html',ports=ports,weakpwd=weakpwd)




@app.route('/sshpassinfo', methods=['GET', 'POST'])
def sshweakinfo():
    hostlist = request.args.get('hostlists')
    res = sshweakpass(hostlist)
    if res == 'sshpassweak':
        res = 'sshpassweak'
    else:
        res = 'nosshpassweak'
    ports = selectinfoDao.getsshport()
    weakpwd = selectinfoDao.getsshpass(2)
    return render_template('/tables/sshpassweak.html',ports=ports,weakpwd=weakpwd,res=res)


@app.route('/sshpassweak', methods=['GET', 'POST'])
def sshweak():
    ports = selectinfoDao.getsshport()
    weakpwd = selectinfoDao.getmysqlpass(2)
    return render_template('/tables/sshpassweak.html',weakpwd=weakpwd,ports=ports)




@app.route('/chartshow', methods=['GET', 'POST'])
def chartshow():
    return render_template('/charts/chartjs.html')

@app.route('/chartshowinfo', methods=['GET', 'POST'])
def chartinfo():
    vultotal = request.args.get('vultotal')
    print(vultotal)
    vuls = selectinfoDao.getvulinfo(vultotal)
    vulsde = selectinfoDao.getvuldeinfo(vultotal)
    print(vulsde)
    sum = vuls[-1] + vuls[-2] + vuls[-3] + vuls[-4]

    print(sum)
    proportion = []
    for i in (-1,-2,-3,-4):
        f = (vuls[i]/sum)*100
        proportion.append('%.2f'%f)
    print(proportion)
    risk = ['Lightdanger','Moderaterisk','Highrisk','critical']
    reason = {'xss':'服务器端对用户输入不进行处理，直接将用户输入输出到浏览器，则浏览器将会执行用户注入的脚本。','sql':'\
    对sql语句和关键字未进行过滤，导致客户端可以通过全局变量get或者post提交sql语句到服务器端正常运行;','priesc':'相关服务版\
    本存在提权问题','mysqlpassweak':'Mysql密码设置比较简存在与破解字典中'}
    riskres = knnriskcheck(vuls)
    riskres = riskres[0]
    print(riskres)
    return render_template('charts/chartjs.html',vulsde=vulsde,vuls=vuls,risk=risk,proportion=proportion,\
                           reason=reason,riskres=riskres)







if __name__ == '__main__':
    app.run()
'''
定义：处理URL和函数之间关系的程序。
简单的说：路由就是将URL绑定到一个函数上面，这样浏览器客户端向web服务器发送一个URL请求后，服务器中的
路由收到这个URL后，能立马找到对应的函数进行处理。
'''